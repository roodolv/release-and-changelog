name: "Release and Changelog"
author: "roodolv"
description: "Automatically generates Releases and updates CHANGELOG."
inputs:
  github_token:
    description: "Set the {{ secrets.GITHUB_TOKEN }} here"
    required: true
  pr_token:
    description: "Set a read-only token for pull requests, required when using this action with a private repository."
    required: false
  tag_prefix:
    description: "Set the prefix of the version tag. If empty (''), the tag '1.2.3' will be detected."
    required: false
    default: "v"
  semver_config:
    description: "Set the JSON field to include a label for PRs and a semantic versioning type."
    required: false
    default: '{"semver_types":[{"type":"major","label":["breaking-change"]},{"type":"minor","label":["feature","enhancement"]},{"type":"patch","label":["bug","hotfix"]}]}'
  category_config:
    description: "Set the JSON field to include a prefix for commit messages and a heading for release notes."
    required: false
    default: '{"categories":[{"prefix":["revert"],"title":"Reverts"},{"prefix":["refactor"],"title":"Refactoring"},{"prefix":["perf"],"title":"Performance"}]}'
runs:
  using: "composite"
  steps:
    - name: Get default branch name
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        default_branch=$(gh api repos/${{ github.repository }} --jq '.default_branch')
        echo "Default branch is: $default_branch"
        echo "DEFAULT_BRANCH=$default_branch" >> $GITHUB_ENV

    - name: Detect a version type
      id: detect_version
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PR_TOKEN: ${{ inputs.pr_token || inputs.github_token  }}
        SEMVER_CONFIG: ${{ inputs.semver_config }}
        CATEGORY_CONFIG: ${{ inputs.category_config }}
        GH_REPO: ${{ github.repository }}
        HEAD_SHA: ${{ github.sha }}
      run: |
        chmod +x ${{ github.action_path }}/src/version.sh
        ${{ github.action_path }}/src/version.sh

    - name: Check the detected version
      shell: bash
      run: |
        version="${{ steps.detect_version.outputs.version }}"
        if [ -z "$version" ]; then
          echo "Warning: No semver type detected. Update aborted."
          exit 1
        else
          echo "Semver type detected. Starting update."
        fi

    - name: Execute main script
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PR_TOKEN: ${{ inputs.pr_token || inputs.github_token  }}
        TAG_PREFIX: ${{ inputs.tag_prefix }}
        CATEGORY_CONFIG: ${{ inputs.category_config }}
        SEMVER_TYPE: ${{ steps.detect_version.outputs.version }}
        GH_REPO: ${{ github.repository }}
        GH_SHA: ${{ github.sha }}
      run: |
        chmod +x ${{ github.action_path }}/src/main.sh
        ${{ github.action_path }}/src/main.sh
branding:
  icon: "tag"
  color: "white"
